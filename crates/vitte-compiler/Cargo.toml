[package]
name        = "vitte-compiler"
description = "Compilateur Vitte : passes (collecte, typage), table des symboles, diagnostics, et émission de bytecode."

version      = { workspace = true }
edition      = { workspace = true }
rust-version = { workspace = true }
license      = { workspace = true }
repository   = { workspace = true }
homepage     = { workspace = true }
readme       = { workspace = true }
documentation= "https://docs.rs/vitte-compiler"

keywords   = ["compiler", "language", "bytecode", "vitte"]
categories = ["compilers", "development-tools", "parser-implementations"]

exclude = [".github/*", "examples/*", "tests/*"]

[lib]
name = "vitte_compiler"
path = "src/lib.rs"

[features]
# Par défaut : std (I/O utilitaires, etc.)
default = ["std"]

# Support std. En no_std: `--no-default-features`.
std = ["dep:rayon"]

# Sérialisation interne (si tu derives/exports des structures)
serde = ["dep:serde"]

# Compression de la section CODE (si ton émetteur compresse).
zstd = ["dep:zstd"]

# Backend VITBC (utilise le crate vitte-vitbc comme émetteur)
vitbc-backend = ["dep:vitte-vitbc"]

# Combo pratique: backend VITBC + zstd (active aussi la feature côté vitte-vitbc)
vitbc-backend-zstd = ["vitbc-backend", "zstd", "vitte-vitbc/compression"]

# Full = tout
full = ["std", "serde", "zstd", "vitbc-backend"]

[dependencies]
# AST (source de la compilation)
vitte-ast   = { path = "../vitte-ast", version = "0.1.0" }

# Émetteur VITBC optionnel (backend)
vitte-vitbc = { path = "../vitte-vitbc", version = "0.1.0", optional = true, default-features = false }

# ⚠️ Important : déclarer serde explicitement, car utilisé dans features
serde       = { workspace = true, optional = true, features = ["derive"] }

# externes
zstd        = { version = "0.13", optional = true, default-features = false }
thiserror   = { workspace = true, optional = true }
rayon       = { workspace = true, optional = true }

[dev-dependencies]
serde_json        = { workspace = true }
pretty_assertions = { workspace = true }

[package.metadata.docs.rs]
all-features = true

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
all                     = "warn"
pedantic                = "warn"
nursery                 = "warn"
module_name_repetitions = "allow"
too_many_lines          = "allow"
doc_markdown            = "allow"
