[package]
name        = "vitte-lsp"
description = "Serveur LSP pour le langage Vitte : diagnostics, complétion, hover, go-to, formatage."

version      = { workspace = true }
edition      = { workspace = true }
rust-version = { workspace = true }
license      = { workspace = true }
repository   = { workspace = true }
homepage     = { workspace = true }
readme       = { workspace = true }

keywords   = ["vitte", "language-server", "lsp", "compiler", "ide"]
categories = ["development-tools", "development-tools::build-tools"]

[lib]
name = "vitte_lsp"
path = "src/lib.rs"

# Binaries : stdio par défaut, tcp en option
[[bin]]
name = "vitte-lsp"
path = "src/bin/stdio.rs"
required-features = ["stdio"]

[[bin]]
name = "vitte-lsp-tcp"
path = "src/bin/tcp.rs"
required-features = ["tcp"]

[features]
# Confort par défaut
default = ["std", "serde", "stdio", "tracing"]

# Environnement standard
std = []

# Transport
stdio = []            # LSP sur STDIO (usage classique avec VS Code)
tcp   = []            # LSP via TCP (debug/dev out-of-editor)

# Sérialisation (config & messages)
serde = ["dep:serde", "dep:serde_json"]

# Observabilité
tracing = ["dep:tracing", "dep:tracing-subscriber"]

# Watching des fichiers (optionnel)
notify = ["dep:notify"]

# Optim: petites collections si besoin
small  = ["dep:smallvec"]

# Erreurs jolies
errors = ["dep:thiserror"]

# Intégrations graph/IR (si le serveur s’appuie dessus)
ir = ["dep:vitte-ir"]

[dependencies]
# Internes
vitte-core  = { path = "../vitte-core",  version = "0.1.0" }
vitte-lexer = { path = "../vitte-lexer", version = "0.1.0" }
vitte-syntax = { path = "../vitte-syntax", version = "0.1.0" }
vitte-ir    = { path = "../vitte-ir",    version = "0.1.0", optional = true }

# LSP & runtime
tower-lsp = { version = "0.20" }
tokio     = { version = "1.40", features = ["rt-multi-thread", "macros", "io-std", "net", "sync", "fs"] }

# Sérialisation / JSON
serde      = { workspace = true, optional = true, default-features = false, features = ["derive"] }
serde_json = { workspace = true, optional = true }

# Logs / tracing
tracing            = { version = "0.1", optional = true, features = ["attributes", "log", "release_max_level_info"] }
tracing-subscriber = { version = "0.3", optional = true, features = ["env-filter", "fmt", "ansi", "time"] }

# Qualité de vie
thiserror   = { workspace = true, optional = true }
anyhow      = { version = "1" }
smallvec    = { version = "1.15.1", optional = true }
notify      = { version = "8.2.0", optional = true }
dashmap     = { version = "6.1.0", optional = true }
indexmap    = { version = "2", optional = true }
parking_lot = { version = "0.12", optional = true }

# Divers utiles
bitflags = { version = "2.6" }

[dev-dependencies]
pretty_assertions = { workspace = true }
proptest          = { workspace = true }
serde_json        = { workspace = true }

# Pour tests LSP (golden files)
insta    = { version = "1", features = ["yaml"] }
tempfile = { version = "3" }

[package.metadata.docs.rs]
all-features        = false
features            = ["std", "serde", "tracing"]
no-default-features = false
rustdoc-args        = ["--cfg", "docsrs"]

[lints.rust]
unsafe_code = "forbid"

[lints.clippy]
all                      = "warn"
pedantic                 = "warn"
nursery                  = "warn"
module_name_repetitions  = "allow"
too_many_lines           = "allow"
doc_markdown             = "allow"
