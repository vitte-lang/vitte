# Cargo configuration for the Vitte monorepo
# Docs: https://doc.rust-lang.org/cargo/reference/config.html

[term]
color = "auto"

[build]
# Un seul target-dir pour tout le workspace (plus rapide en CI)
target-dir = "target"

[net]
git-fetch-with-cli = true
retry = 2

# ----- Profiles ----------------------------------------------------------
[profile.dev]
opt-level = 1
debug = true            # (=2) debug complet
debug-assertions = true
overflow-checks = true
incremental = true

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
debug = 1              # symboles utiles (perf/addr2line)
strip = "debuginfo"    # enlève le DWARF des binaires finaux

[profile.bench]
opt-level = 3
lto = "thin"
codegen-units = 1
debug = 1

[profile.test]
opt-level = 0
debug = true
overflow-checks = true

# ----- Env (générique) ---------------------------------------------------
[env]
# ⚠️ Optimise pour la machine locale (non-reproductible).
# Recommande: garder ici, et désactiver en CI via variables d'env.
RUSTFLAGS = "-C target-cpu=native"
# Active les items cfg(docsrs) localement aussi (utile si tu veux tester les docs comme sur docs.rs).
RUSTDOCFLAGS = "--cfg docsrs"

# ----- Sources / Registry ------------------------------------------------
# Depuis Cargo 1.68+, le "sparse index" est par défaut. Garder explicite reste OK.
[source.crates-io]
replace-with = "sparse"

[source.sparse]
registry = "sparse+https://index.crates.io/"

# (Optionnel) Patch de crates internes pendant le dev local
# [patch.crates-io]
# vitte-core = { path = "crates/vitte-core" }
# vitte-vm   = { path = "crates/vitte-vm" }
# vitte-cli  = { path = "crates/vitte-cli" }

# ----- Aliases -----------------------------------------------------------
[alias]
b = "build --workspace"
r = "run -p vitte-cli --"
t = "test --workspace --all-features"
fmt = "fmt --all"
clippy = "clippy --workspace --all-features -- -D warnings"
doc = "doc --workspace --all-features --no-deps"
bench = "bench --workspace"
release = "build --workspace --release"

# WASM helpers (utilise stable; pour -Z build-std → nightly seulement)
wasm = "build --target wasm32-unknown-unknown -p vitte-core"
wasm-wasi = "build --target wasm32-wasi -p vitte-core"

# ----- Runners / Targets -------------------------------------------------
[target.wasm32-wasi]
# Exécuter `cargo run --target wasm32-wasi -p vitte-core` via wasmtime
runner = "wasmtime run --dir=."

[target.wasm32-unknown-unknown]
# Panic abort recommandé côté wasm "bare" (pas de std)
rustflags = ["-C", "panic=abort"]

# Exemple Linux (décommentez si vous avez lld)
# [target.x86_64-unknown-linux-gnu]
# linker = "clang"
# rustflags = ["-C", "link-arg=-fuse-ld=lld"]

# macOS (ld64 par défaut — généralement ok)
# [target.aarch64-apple-darwin]
# rustflags = ["-C", "link-arg=-Wl,-dead_strip"]

# ----- Include overrides -------------------------------------------------
# Cargo fusionne automatiquement `config.local.toml` si présent dans ce dossier.
# Idéal pour surcharger RUSTFLAGS ou runners en local/CI.
