---
source: tests/src/lib.rs
assertion_line: 380
expression: norm
---
Program {
items: [
Function(
Function {
name: "factorial",
params: [
Param {
name: "n",
ty: Int,
span: None,
},
],
return_type: Some(
Int,
),
body: Block {
stmts: [
If {
condition: Binary {
left: Ident(
"n",
),
op: Le,
right: Literal(
Int(
1,
),
),
},
then_block: Block {
stmts: [
Return(
Some(
Literal(
Int(
1,
),
),
),
Some(
Span {
line: 3,
column: 9,
offset: 56,
},
),
),
],
span: Some(
Span {
line: 2,
column: 17,
offset: 46,
},
),
},
else_block: None,
span: Some(
Span {
line: 2,
column: 5,
offset: 34,
},
),
},
Return(
Some(
Binary {
left: Ident(
"n",
),
op: Mul,
right: Call {
func: Ident(
"factorial",
),
args: [
Binary {
left: Ident(
"n",
),
op: Sub,
right: Literal(
Int(
1,
),
),
},
],
},
},
),
Some(
Span {
line: 5,
column: 5,
offset: 76,
},
),
),
],
span: Some(
Span {
line: 1,
column: 29,
offset: 28,
},
),
},
span: Some(
Span {
line: 1,
column: 1,
offset: 0,
},
),
},
),
Function(
Function {
name: "main",
params: [],
return_type: None,
body: Block {
stmts: [
Let {
name: "value",
ty: Some(
Int,
),
value: Some(
Call {
func: Ident(
"factorial",
),
args: [
Literal(
Int(
5,
),
),
],
},
),
span: Some(
Span {
line: 9,
column: 5,
offset: 124,
},
),
},
If {
condition: Binary {
left: Ident(
"value",
),
op: Gt,
right: Literal(
Int(
0,
),
),
},
then_block: Block {
stmts: [
Expr(
Call {
func: Ident(
"print",
),
args: [
Ident(
"value",
),
],
},
),
],
span: Some(
Span {
line: 10,
column: 20,
offset: 174,
},
),
},
else_block: Some(
Block {
stmts: [
Expr(
Call {
func: Ident(
"print",
),
args: [
Literal(
Int(
0,
),
),
],
},
),
],
span: Some(
Span {
line: 12,
column: 12,
offset: 209,
},
),
},
),
span: Some(
Span {
line: 10,
column: 5,
offset: 159,
},
),
},
],
span: Some(
Span {
line: 8,
column: 11,
offset: 118,
},
),
},
span: Some(
Span {
line: 8,
column: 1,
offset: 108,
},
),
},
),
],
}
